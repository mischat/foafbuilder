<?php
require_once 'Field.php';
require_once 'helpers/Utils.php';

/*class to represent one item e.g. foafName or bioBirthday... not the same as one triple*/
class HoldsAccountField extends Field {
	
	/*predicateUri is only appropriate for simple ones (one triple only)*/
	public function HoldsAccountField($foafData) {
		//Put in test for an empty foafData, before querying
		if ($foafData) {

			$queryString = 
			"PREFIX foaf: <http://xmlns.com/foaf/0.1/>
			 PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
			 PREFIX bio: <http://purl.org/vocab/bio/0.1/>
			 PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			 SELECT  ?a ?foafAccountProfilePage ?foafAccountServiceHomepage ?foafAccountName
			 WHERE{
					<".$foafData->getPrimaryTopic()."> foaf:holdsAccount ?a . 
					?a rdf:type foaf:OnlineAccount 
					OPTIONAL{
						?a foaf:accountProfilePage ?foafAccountProfilePage .
					} .
					OPTIONAL{
						?a foaf:accountServiceHomepage ?foafAccountServiceHomepage .
					} .
					OPTIONAL{
						?a foaf:accountName ?foafAccountName .
					}
				};";
		 
			$results = $foafData->getModel()->SparqlQuery($queryString);		
				
			$this->data['foafHoldsAccountFields'] = array();
			

			if (!empty($result)) {
				/*mangle the results so that they can be easily rendered*/
				foreach($results as $row){	
					/*key them on the account*/
					if(!isset($this->data['foafHoldsAccountFields'][$row['?a']->uri])){
						$this->data['foafHoldsAccountFields'][$row['?a']->uri] = array();
					}
					
					/*create an array for each of the properties we care about*/
					if(!isset( $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountProfilePage'])){
						 $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountProfilePage'] = array();
					}
					if(!isset( $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountServiceHomepage'])){
						 $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountServiceHomepage'] = array();
					}
					if(!isset( $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountName'])){
						 $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountName'] = array();
					}
					
					/*fill the array we've created*/
					array_push( $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountProfilePage'], $row['?foafAccountProfilePage']);
					array_push( $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountServiceHomepage'], $row['?foafAccountServiceHomepage']);
					array_push( $this->data['foafHoldsAccountFields'][$row['?a']->uri]['foafAccountName'], $row['?foafAccountName']);
				}
				
			
				//TODO: perhaps it is better to keep all the display stuff in the javascript?
				$this->data['foafHoldsAccountFields']['displayLabel'] = 'Accounts';
				$this->data['foafHoldsAccountFields']['name'] = 'foafHoldsAccount';
				$this->name = 'foafHoldsAccount';
				$this->label = 'Accounts';
				return 1;
			} else {
				return 0;
			}
		} else {
			//TODO MISCHA
			return 0;
		}
	}

	public function getPredicateUri() {
		return $this->predicateUri;
	}
	public function setPredicateUri($predicateUri) {
		$this->predicateUri = $predicateUri;
	}
	/*saves the values created by the editor in value... as encoded in json.*/
	public function saveToModel(&$foafData, $value) {
		echo("SAVING ACCOUNTSFields");
		require_once 'SimpleField.php';
		require_once 'FieldNames.php';
		
		/*array to keep any accounts that we should not remove in*/
		$doNotCleanArray = array();
		
		/*array to keep track of bnode ids versus random strings generated by the UI*/
		$randomStringToBnodeArray = $foafData->getRandomStringToBnodeArray();
		
		foreach($value as $holdsAccountName => $holdsAccountContents){
			
			/*XXX: make sure this works with adding and removing triples */
			if($holdsAccountContents->foafAccountProfilePage){
				
				/*find the triples associated with this account*/
				$foundModelProfilePage = $foafData->getModel()->find(new BlankNode($holdsAccountName), new Resource('http://xmlns.com/foaf/0.1/accountProfilePage'), NULL);
				$foundModelServHomepage = $foafData->getModel()->find(new BlankNode($holdsAccountName), new Resource('http://xmlns.com/foaf/0.1/accountServiceHomepage'), NULL);
				$foundModelAccountName = $foafData->getModel()->find(new BlankNode($holdsAccountName), new Resource('http://xmlns.com/foaf/0.1/accountName'), NULL);
				
				/*remove them*/
				foreach($foundModelProfilePage->triples as $triple){
					$foafData->getModel()->remove($triple);
				}
				foreach($foundModelServHomepage->triples as $triple){
					$foafData->getModel()->remove($triple);
				}
				foreach($foundModelAccountName->triples as $triple){
					$foafData->getModel()->remove($triple);
				}
				
				/*if the account is a new one then create it*/
				//XXX is this the best criterion?
				if(strlen($holdsAccountName) == 50){
								
					/*check whether it is a totally new account or whether the bnode has already been generated*/
					if(isset($randomStringToBnodeArray[$holdsAccountName])){
						echo("\n"."FOUND IN ARRAY: ".$randomStringToBnodeArray[$holdsAccountName]."\n");
						$holdsAccountBnode = new BlankNode($randomStringToBnodeArray[$holdsAccountName]);
					} else {
						
						//XXX RAP doesn't seem to be very good at generating unique bnodes, so do some jiggery pokery
						//$holdsAccountBnode = new BlankNode($foafData->getModel());
						$holdsAccountBnode = Utils::GenerateUniqueBnode($foafData->getModel());
						
						//TODO: create an account triple here and add it to the model.  also set the bnode to be created.
						$accountStatement = new Statement(new Resource($foafData->getPrimaryTopic()),new Resource('http://xmlns.com/foaf/0.1/holdsAccount'),$holdsAccountBnode);
						$bNodeStatement = new Statement($holdsAccountBnode,new Resource('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),new Resource('http://xmlns.com/foaf/0.1/OnlineAccount'));
						
						$foafData->getModel()->add($bNodeStatement);
						$foafData->getModel()->add($accountStatement);
						
						/*so that we can keep track of what's going on*/
						$randomStringToBnodeArray[$holdsAccountName] = $holdsAccountBnode->uri;
						echo("\n"."NOT FOUND IN ARRAY: ".$randomStringToBnodeArray[$holdsAccountName]."\n");
					}	
				} else {
					echo("\n"."EXISTING BNODE: ".$holdsAccountName."\n");
					$holdsAccountBnode = new BlankNode($holdsAccountName);
				}
			
				//we don't want to remove this one
				$doNotCleanArray[$holdsAccountBnode->uri] = $holdsAccountBnode->uri;
				
				/*add new ones*/
				if($holdsAccountContents->foafAccountProfilePage && $holdsAccountContents->foafAccountProfilePage[0] && $holdsAccountContents->foafAccountProfilePage[0]->uri){
					$newStatement = new Statement($holdsAccountBnode, new Resource('http://xmlns.com/foaf/0.1/accountProfilePage'), new Resource($holdsAccountContents->foafAccountProfilePage[0]->uri));
					$foafData->getModel()->add($newStatement);
				}
				if($holdsAccountContents->foafAccountServiceHomepage && $holdsAccountContents->foafAccountServiceHomepage[0] && $holdsAccountContents->foafAccountServiceHomepage[0]->uri){
					$newStatement = new Statement($holdsAccountBnode, new Resource('http://xmlns.com/foaf/0.1/accountServiceHomepage'), new Resource($holdsAccountContents->foafAccountServiceHomepage[0]->uri));
					$foafData->getModel()->add($newStatement);
				}
				if($holdsAccountContents->foafAccountName && $holdsAccountContents->foafAccountName[0] && $holdsAccountContents->foafAccountName[0]->label){
					$newStatement = new Statement($holdsAccountBnode, new Resource('http://xmlns.com/foaf/0.1/accountName'), new Literal($holdsAccountContents->foafAccountName[0]->label));
					$foafData->getModel()->add($newStatement);
				}

			}
		}
		
		/*clean out all accounts that we haven't edited*/
		$allAccounts = $foafData->getModel()->find(new Resource($foafData->getPrimaryTopic()), new Resource('http://xmlns.com/foaf/0.1/holdsAccount'), NULL);
		foreach($allAccounts->triples as $triple){
			if(!$doNotCleanArray[$triple->obj->uri]){
				$foafData->getModel()->remove($triple);
			}
		}
		
		/*so that we can keep track*/
		$foafData->setRandomStringToBnodeArray($randomStringToBnodeArray);
	
	}
}
?>
